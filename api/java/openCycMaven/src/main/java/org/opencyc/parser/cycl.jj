/* This is a javacc file that describes the CycL grammar
 * as a EBNF with javacc markups and a bit of embedded Java code
 * for creating parsed objects.
 * 
 * The CycL parser files can be regenerated by calling (after cd'ing to the parser directory):
 * "/cyc/tools-noarch/java/javacc-5.0/bin/javacc cycl.jj". JavaCC 3.2 was used in the creation of the
 * source files.
 * 
 * Changes from our current SubL-based CycL parser and/or 
 * current documentation:
 *
 * 1. #$ExpandSubLFn and #$SubLQuoteFn are not supported
 *         -@Note: these seem like a really, 
 *          really bad thing to support in the the syntax. This means that 
 *          in order to do the most basic syntatic checking/tokenization of 
 *          CycL statements, one must have the complete knowledge
 *          of the SubL grammar...these would probably
 *          better be handled with opaque structures like strings or 
 *          sentinel delimited sections.
 *
 * 2. Added support for C++ style comments.
 *        Anything starting from a "//" that isn't embedded in a string
 *        on a line in a CycL expression to the end of the same line 
 *        is ignored as a comment. The lisp version of this with a 
 *        semicolon is also supported.
 *        Embedded comments with slash-star and star-slash are allowed. 
 *        Nesting of embedded comments is not allowed.
 *
 * 3. Don't use SubLString and SubLNumber.
 *        Instead use explicit definitions of strings and numbers.
 *        These explicit definitions may not exactly correspond to 
 *            to their SubL counterpart.
 *        For decimal integers we support notatation like: 1, +1, 23, -344.
 *        For floating point numbers: 0.1, .32, -23.0, +234.323, 9E-234, 
 *            +9e234, 9e+234, -9.1134e-11 (also variations where "e" is 
 *            replaced by "d" are supported, but not encouraged -- 
 *            the d notation is a artifact of the Lisp interpreter, 
 *            while the e notation is a widely adopted standard for 
 *            scientific notation).
 *        Note: floating point numbers that contain e,E,d,D,- and numbers only
 *            could be amibiguous with a non-prefixed constant names, 
 *            the floating point interpretation is always taken.
 *        European style numbers with a comma as the decimal separator 
 *            are not allowed.
 *        Comma separators in the thousands places are not allowed.
 *        For strings, we support ascii characters inside of double quotation
 *        marks with a backslash escapes like: "hi", "\"bye\"\n"
 * 
 * 4. Added special support for parsing from GUIDs.
 *        Any string preceded by "#G" is parsed as constant with the given 
 *        GUID.
 *        Any character sequences not enclosed in double quotes and
 *        containing only hexidecimal characters and dashes preceded by a "#G"
 *        are interpreted as a GUIDs. #g works too.
 *
 * 5. No deprecated features of the language are supported like characters,
 *        list terminals, SubL symbols, SubL expressions etc..
 *
 * 6. No support for HL constructs.
 *
 * The contents of this file is based on the BNF comment
 * at the top of cycl-grammar.lisp and on the contents and documentation
 * of the CycL vocabulary in the KB, and on the current behavior of the system
 * with a bit of cleaning up.
 *
 * @version $Id: cycl.jj 138070 2012-01-10 19:46:08Z sbrown $
 * @author Tony Brusseau
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

options
{
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  STATIC = false;
}

PARSER_BEGIN(CycLParser)
package org.opencyc.parser;

import org.opencyc.api.*;
import org.opencyc.cycobject.*;

/**
 * <P>This class implements a parser for the CycL grammar. This file
 * was automatically generated with javacc based on the file: "cycl.jj".
 * The CycL parser files can be regenerated by calling:
 * "javacc cycl.jj"
 * 
 * <P>Changes from our current SubL-based CycL parser and/or 
 * current documentation:
 * <UL>
 * <LI>1. #$ExpandSubLFn and #$SubLQuoteFn are not supported
 *         -@Note: these seem like a really, 
 *          really bad thing to support in the the syntax. This means that 
 *          in order to do the most basic syntatic checking/tokenization of 
 *          CycL statements, one must have the complete knowledge
 *          of the SubL grammar...these would probably
 *          better be handled with opaque structures like strings or 
 *          sentinel delimited sections.
 *
 *<LI> 2. Added support for C++ style comments.
 *        Anything starting from a "//" that isn't embedded in a string
 *        on a line in a CycL expression to the end of the same line 
 *        is ignored as a comment. The lisp version of this with a 
 *        semicolon is also supported.
 *        Embedded comments with slash-star and star-slash are allowed. 
 *        Nesting of embedded comments is not allowed.
 *
 *<LI> 3. Don't use SubLString and SubLNumber.
 *        Instead use explicit definitions of strings and numbers.
 *        These explicit definitions may not exactly correspond to 
 *            to their SubL counterpart.
 *        For decimal integers we support notatation like: 1, +1, 23, -344.
 *        For floating point numbers: 0.1, .32, -23.0, +234.323, 9E-234, 
 *            +9e234, 9e+234, -9.1134e-11 (also variations where "e" is 
 *            replaced by "d" are supported, but not encouraged -- 
 *            the d notation is a artifact of the Lisp interpreter, 
 *            while the e notation is a widely adopted standard for 
 *            scientific notation).
 *        Note: floating point numbers that contain e,E,d,D,- and numbers only
 *            could be amibiguous with a non-prefixed constant names, 
 *            the floating point interpretation is always taken.
 *        European style numbers with a comma as the decimal separator 
 *            are not allowed.
 *        Comma separators in the thousands places are not allowed.
 *        For strings, we support ascii characters inside of double quotation
 *        marks with a backslash escapes like: "hi", "\"bye\"\n"
 * 
 *<LI> 4. Added special support for parsing from GUIDs.
 *        Any string preceded by "#G" is parsed as constant with the given 
 *        GUID.
 *        Any character sequences not enclosed in double quotes and
 *        containing only hexidecimal characters and dashes preceded by a "#G"
 *        are interpreted as a GUIDs. #g works too.
 *
 *<LI> 5. No deprecated features of the language are supported like characters,
 *        list terminals, SubL symbols, SubL expressions etc..
 *
 *<LI> 6. No support for HL constructs.
 * <UL>
 * <P>The contents of this file is based on the BNF comment
 * at the top of cycl-grammar.lisp and on the contents and documentation
 * of the CycL vocabulary in the KB, and on the current behavior of the system
 * with a bit of cleaning up.
 *
 * @version $Id: cycl.jj 138070 2012-01-10 19:46:08Z sbrown $
 * @author Tony Brusseau
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
  class CycLParser extends Object {

    private CycAccess access;

    public CycLParser(java.io.Reader stream, CycAccess access) {
      this(stream);
      this.access = access;
    }

    public CycAccess getCycAccess() { return access; }

    /**
     * The parser program.
     *
     * @param args currently ignored.
     */
    public static void main(String[] args) {
      CycLParser parser = new CycLParser(System.in);
      try {
        parser.term(true);
      } catch (Exception e) {
        System.err.println(e);
      }
    }
  }

PARSER_END(CycLParser)

/********************** MISC ***********************/

TOKEN :
{
  < OPEN_PAREN : "(" >
  | < CLOSE_PAREN : ")" >
}

SKIP :
{
  "//" : IN_LINE_COMMENT
  | ";" : IN_LINE_COMMENT
  | "/*" : IN_COMMENT
}

< IN_LINE_COMMENT > SKIP :
{
   "\n" : DEFAULT
}

< IN_LINE_COMMENT > MORE :
{
  < ~[] >
}

< IN_COMMENT > SKIP :
{
  "*/" : DEFAULT
}

< IN_COMMENT > MORE :
{
  < ~[] >
}

SKIP :
{
  < WS : " " | "\t" | "\f" | "\r" | "\n" >
}

/********************* PREFIXES ********************/

TOKEN :
{
  < CONSTANT_PREFIX : "#$" >
  | < SIMPLE_VARIABLE_PREFIX : "?" >
  | < META_VARIABLE_PREFIX : ":" >
}

TOKEN [IGNORE_CASE] :
{
  < GUID_PREFIX : "#G" >
}

/********************* CORE CONSTANTS ********************/

TOKEN :
{
  < TRUE_CONSTANT : ( < CONSTANT_PREFIX > )? "True" >
  | < FALSE_CONSTANT : (< CONSTANT_PREFIX > )? "False" >
  | < AND_CONSTANT : ( < CONSTANT_PREFIX > )? "and" >
  | < OR_CONSTANT : ( < CONSTANT_PREFIX > )? "or" >
  | < XOR_CONSTANT : ( < CONSTANT_PREFIX > )? "xor" >
  | < NOT_CONSTANT : ( < CONSTANT_PREFIX > )? "not" >
  | < EQUIV_CONSTANT : (<  CONSTANT_PREFIX > )? "equiv" >
  | < IMPLIES_CONSTANT : ( < CONSTANT_PREFIX > )? "implies" >
  | < FORALL_CONSTANT : ( < CONSTANT_PREFIX > )? "forAll" >
  | < THEREEXISTS_CONSTANT : ( < CONSTANT_PREFIX > )? "thereExists" >
  | < THEREEXISTEXACTLY_CONSTANT : 
        ( < CONSTANT_PREFIX > )? "thereExistExactly" >
  | < THEREEXISTATMOST_CONSTANT : 
        ( < CONSTANT_PREFIX > )? "thereExistAtMost" >
  | < THEREEXISTATLEAST_CONSTANT : 
        ( < CONSTANT_PREFIX > )? "thereExistAtLeast" >
  | < EXPANDSUBLFN_CONSTANT : 
        ( < CONSTANT_PREFIX > )? "ExpandSubLFn" > //NOT SUPPORTED!!!!!
  | < SUBLQUOTEFN_CONSTANT : 
        ( < CONSTANT_PREFIX > )? "SubLQuoteFn" > //NOT SUPPORTED!!!!!
}


TOKEN [IGNORE_CASE] :
{
  < TRUE_GUID_CONSTANT : < GUID_PREFIX > 
      ( < TRUE_GUID > | ( "\"" < TRUE_GUID > "\"" ) ) >
  | < FALSE_GUID_CONSTANT : < GUID_PREFIX > 
        ( < FALSE_GUID > | ( "\"" <  FALSE_GUID> "\"" ) ) >
  | < AND_GUID_CONSTANT : < GUID_PREFIX > 
        ( < AND_GUID > | ( "\"" < AND_GUID > "\"" ) ) >
  | < OR_GUID_CONSTANT : < GUID_PREFIX > 
        ( < OR_GUID > | ( "\"" < OR_GUID > "\"" ) ) >
  | < XOR_GUID_CONSTANT : < GUID_PREFIX > 
        (  <XOR_GUID > | ( "\"" < XOR_GUID > "\"" ) ) >
  | < NOT_GUID_CONSTANT : < GUID_PREFIX > 
        ( < NOT_GUID > | ( "\"" < NOT_GUID > "\"" ) ) >
  | < EQUIV_GUID_CONSTANT : < GUID_PREFIX > 
        ( <EQUIV_GUID> | ( "\"" < EQUIV_GUID > "\"" ) ) >
  | < IMPLIES_GUID_CONSTANT : < GUID_PREFIX > 
        ( < IMPLIES_GUID > | ( "\"" < IMPLIES_GUID > "\"" ) ) >
  | < FORALL_GUID_CONSTANT : < GUID_PREFIX > 
        ( < FORALL_GUID > | ( "\"" < FORALL_GUID > "\"" ) ) >
  | < THEREEXISTS_GUID_CONSTANT : < GUID_PREFIX > 
        ( < THEREEXISTS_GUID > | ( "\"" < THEREEXISTS_GUID > "\"" ) ) >
  | < THEREEXISTEXACTLY_GUID_CONSTANT : < GUID_PREFIX > 
        ( < THEREEXISTEXACTLY_GUID > | 
              ( "\"" < THEREEXISTEXACTLY_GUID > "\"" ) ) >
  | < THEREEXISTATMOST_GUID_CONSTANT : < GUID_PREFIX > 
        ( < THEREEXISTATMOST_GUID > | 
              ( "\"" < THEREEXISTATMOST_GUID > "\"" ) ) >
  | < THEREEXISTATLEAST_GUID_CONSTANT : < GUID_PREFIX > 
        ( < THEREEXISTATLEAST_GUID > | 
              ( "\"" < THEREEXISTATLEAST_GUID > "\"" ) ) >
  | < EXPANDSUBLFN_GUID_CONSTANT : < GUID_PREFIX >  //NOT SUPPORTED!!!!!
        ( < EXPANDSUBLFN_GUID > | ( "\"" < EXPANDSUBLFN_GUID >"\"" ) ) >
  | < SUBLQUOTEFN_GUID_CONSTANT : < GUID_PREFIX >  //NOT SUPPORTED!!!!!
        ( < SUBLQUOTEFN_GUID > | ( "\"" < SUBLQUOTEFN_GUID > "\"" ) ) >
}

TOKEN [IGNORE_CASE] :  
{
  < TRUE_GUID : "bd5880d9-9c29-11b1-9dad-c379636f7270" >
  | < FALSE_GUID : "bd5880d8-9c29-11b1-9dad-c379636f7270" >
  | < AND_GUID : "bd5880f9-9c29-11b1-9dad-c379636f7270" >
  | < OR_GUID : "bd5880fa-9c29-11b1-9dad-c379636f7270" >
  | < XOR_GUID : "bde7f9f2-9c29-11b1-9dad-c379636f7270" >
  | < NOT_GUID : "bd5880fb-9c29-11b1-9dad-c379636f7270" >
  | < EQUIV_GUID : "bda887b6-9c29-11b1-9dad-c379636f7270" >
  | < IMPLIES_GUID : "bd5880f8-9c29-11b1-9dad-c379636f7270" >
  | < FORALL_GUID : "bd5880f7-9c29-11b1-9dad-c379636f7270" >
  | < THEREEXISTS_GUID : "bd5880f6-9c29-11b1-9dad-c379636f7270" >
  | < THEREEXISTEXACTLY_GUID : "c10ae7b8-9c29-11b1-9dad-c379636f7270" >
  | < THEREEXISTATMOST_GUID : "c10af932-9c29-11b1-9dad-c379636f7270" >
  | < THEREEXISTATLEAST_GUID : "c10af5e7-9c29-11b1-9dad-c379636f7270" >
  //FOLLOWING CONSTANTS NOT SUPPORTED!!!!!
  | < EXPANDSUBLFN_GUID : "c0b2bc13-9c29-11b1-9dad-c379636f7270" >
  | < SUBLQUOTEFN_GUID : "94f07021-8b0d-11d7-8701-0002b3a8515d" >
}

/********************* Terminals ********************/


TOKEN [IGNORE_CASE] :
{
  < INTEGER :  < DECIMAL_INT > >
    | < FLOAT : < FLOAT_ONE > | < FLOAT_TWO > >
    | < #DECIMAL_INT : ( ["+", "-"] )? ["0"-"9"] ( ["0"-"9"] )* >
    | < #FLOAT_ONE : ( ["+", "-"] )? ( ["0"-"9"] )* "." ( ["0"-"9"] )+ >
    | < #FLOAT_TWO : ( ["+", "-"] )? ( ["0"-"9"] )+ 
        (".")? ( ["0"-"9"] )* ["e","d"] ( ["-","+"] )?  ( ["0"-"9"] )+ >
}

TOKEN :
{
  <CONSTANT_NAME1 : ( < CONSTANT_PREFIX > )? < NON_NUMERIC_START_CHAR > 
        ( < VALID_CONSTANT_CHAR > )+ >
    | < #NON_NUMERIC_START_CHAR : ["a"-"z", "A"-"Z", "_"] >
    | < #NUMERIC_START_CHAR : ["0"-"9"] >
    | < #VALID_CONSTANT_CHAR : < NON_NUMERIC_START_CHAR > | "-" | ":" |
        < NUMERIC_START_CHAR > >
    | < CONSTANT_NAME2 : ( < CONSTANT_PREFIX > )? ( <NUMERIC_START_CHAR > )+ 
        ( < NON_NUMERIC_START_CHAR > | "-" )  ( <VALID_CONSTANT_CHAR > )* >
    | < CONSTANT_GUID : < GUID_PREFIX > ( < GUID_CHAR > )+ >
    | < #GUID_CHAR : ["a"-"f", "A"-"F", "0"-"9", "-"] >
    | < CONSTANT_GUID2 : < GUID_PREFIX > < STRING > >
}

TOKEN :
{
  < SIMPLE_VARIABLE : < SIMPLE_VARIABLE_PREFIX > 
      (< SIMPLE_VARIABLE_PREFIX >)? ["a"-"z", "A"-"Z"] 
      ( ( < NON_DASH_VARIABLE_CHAR > )* ( "-"  
      ( < NON_DASH_VARIABLE_CHAR > )+ )? )* >
    | < #NON_DASH_VARIABLE_CHAR : ["a"-"z", "A"-"Z", "0"-"9"] >
    | < META_VARIABLE : < META_VARIABLE_PREFIX > ["a"-"z", "A"-"Z"] 
      ( ( < NON_DASH_META_VARIABLE_CHAR > )* 
      ( "-"  ( < NON_DASH_META_VARIABLE_CHAR > )+ )? )* >
    | < #NON_DASH_META_VARIABLE_CHAR : ["a"-"z", "A"-"Z", "0"-"9"] >
}

TOKEN :
{
  <STRING : "\"" ( ( ~["\"","\\"] ) | ( "\\" ~[] ) )* "\"" >
}

/********************* Parser ********************/

CycList termList(boolean requireEOF) throws java.io.IOException, UnsupportedVocabularyException :
{
  CycList val = new CycList();
  Object curTerm = null;
}
{
  ( curTerm = term(false) { val.add(curTerm); } )*
  eof(requireEOF)
  { return val; }
}

Object term(boolean requireEOF) throws java.io.IOException, UnsupportedVocabularyException :
{
  Object result = null;
}
{
  (
    //since nonAtomicDenotationalTerms 
    //and sentences are lexically ambiguous always read them as sentences
    //when we decide to differentiate them at parse time we'll need to 
    //add a semantic lookahead here and uncomment the following line
    /*result = nonAtomicDenotationalTerm(false) 
    | */LOOKAHEAD( < TRUE_CONSTANT > | < TRUE_GUID_CONSTANT > | 
                   < FALSE_CONSTANT > | < FALSE_GUID_CONSTANT > |
                   < SIMPLE_VARIABLE > | < META_VARIABLE > | 
                   < OPEN_PAREN > ) result = sentence(false)
    | result = atomicDenotationalTerm(false)
  )
  eof(requireEOF)
  { return result; }
}

void eof(boolean requireEOF) :
{
}
{
  { if (!requireEOF) return; }
  < EOF >
}

CycObject sentence(boolean requireEOF) throws java.io.IOException, UnsupportedVocabularyException :
{
  CycObject val = null;
}
{
  ( 
    /*LOOKAHEAD( < TRUE_CONSTANT > | < TRUE_GUID_CONSTANT > | 
               < FALSE_CONSTANT > | < FALSE_GUID_CONSTANT > )
    val = constant(false) 
    | val = variable(false)*/
    val = sentenceDenotingRepresentedTerm(false)
    | ( < OPEN_PAREN > ( val = notForm(false) | val = andForm(false) | val = orForm(false)
      | val = xorForm(false) | val = impForm(false) | val = equivForm(false) 
      | val = univForm(false) | val = existForm(false) | val = existExactForm(false) 
      | val = existUBoundForm(false) | val = existLBoundForm(false) 
      | val = genericSentence(false) ) < CLOSE_PAREN > )
  )
  eof(requireEOF)
  { return val; }
}

CycList notForm(boolean requireEOF) throws java.io.IOException, UnsupportedVocabularyException :
{
  CycObject sent = null;
  CycList val = new CycList();
}
{
  (
    ( < NOT_CONSTANT > | < NOT_GUID_CONSTANT > ) { val.add(getCycAccess().not); }
    sent = sentence(false) { val.add(sent); }
  )
  eof(requireEOF)
  { return val; }
}

CycList andForm(boolean requireEOF) throws java.io.IOException, UnsupportedVocabularyException :
{
  CycList sentences = null;
  CycList val = new CycList();
}
{
  (
    ( < AND_CONSTANT > | < AND_GUID_CONSTANT > ) { val.add(getCycAccess().and); }
    sentences = sentenceList(false) { if (sentences != null) { val.addAll(sentences); } }
  )
  eof(requireEOF)
  { return val; }
}

CycList orForm(boolean requireEOF) throws java.io.IOException, UnsupportedVocabularyException :
{
  CycList sentences = null;
  CycList val = new CycList();
}
{
  (
    ( < OR_CONSTANT > | < OR_GUID_CONSTANT > ) { val.add(getCycAccess().or); }
    sentences = sentenceList(false) { if (sentences != null) { val.addAll(sentences); } }
  )
  eof(requireEOF)
  { return val; }
}

CycList xorForm(boolean requireEOF) throws java.io.IOException, UnsupportedVocabularyException :
{
  CycObject sent = null;
  CycObject sent2 = null;
  CycList val = new CycList();
}
{
  (
    ( < XOR_CONSTANT > | < XOR_GUID_CONSTANT > ) { val.add(getCycAccess().xorConst); }
    sent = sentence(false) { val.add(sent); }
    sent2 = sentence(false) { val.add(sent2); }
  )
  eof(requireEOF)
  { return val; }
}

CycList impForm(boolean requireEOF) throws java.io.IOException, UnsupportedVocabularyException :
{
  CycObject sent = null;
  CycObject sent2 = null;
  CycList val = new CycList();
}
{
  (
    ( < IMPLIES_CONSTANT > | < IMPLIES_GUID_CONSTANT > ) { val.add(getCycAccess().impliesConst); }
    sent = sentence(false) { val.add(sent); }
    sent2 = sentence(false) { val.add(sent2); }
  )
  eof(requireEOF)
  { return val; }
}

CycList equivForm(boolean requireEOF) throws java.io.IOException, UnsupportedVocabularyException :
{
  CycObject sent = null;
  CycObject sent2 = null;
  CycList val = new CycList();
}
{
  (
    ( < EQUIV_CONSTANT > | < EQUIV_GUID_CONSTANT > ) { val.add(getCycAccess().equivConst); }
    sent = sentence(false) { val.add(sent); }
    sent2 = sentence(false) { val.add(sent2); }
  )
  eof(requireEOF)
  { return val; }
}

CycList univForm(boolean requireEOF) throws java.io.IOException, UnsupportedVocabularyException :
{
  CycObject var = null;
  CycObject sent = null;
  CycList val = new CycList();
}
{
  (
    ( < FORALL_CONSTANT > | < FORALL_GUID_CONSTANT > ) { val.add(getCycAccess().forAllConst); }
    var = variable(false) { val.add(var); }
    sent = sentence(false) { val.add(sent); }
  )
  eof(requireEOF)
  { return val; }
}

CycList existForm(boolean requireEOF) throws java.io.IOException, UnsupportedVocabularyException :
{
  CycVariable var = null;
  CycObject sent = null;
  CycList val = new CycList();
}
{
  (
    ( < THEREEXISTS_CONSTANT > | < THEREEXISTS_GUID_CONSTANT > ) { val.add(getCycAccess().thereExistsConst); }
    var = variable(false) { val.add(var); }
    sent = sentence(false) { val.add(sent); }
  )
  eof(requireEOF)
  { return val; }
}

CycObject existExactForm(boolean requireEOF) throws java.io.IOException, UnsupportedVocabularyException :
{
  CycVariable var = null;
  CycObject sent = null;
  CycList val = new CycList();
}
{
  (
    ( < THEREEXISTEXACTLY_CONSTANT > | < THEREEXISTEXACTLY_GUID_CONSTANT > ) { val.add(getCycAccess().thereExistExactlyConst); }
    var = variable(false) { val.add(var); }
    sent = sentence(false) { val.add(sent); }
  )
  eof(requireEOF)
  { return val; }
}

CycList existUBoundForm(boolean requireEOF) throws java.io.IOException, UnsupportedVocabularyException :
{
  CycVariable var = null;
  CycObject sent = null;
  CycList val = new CycList();
}
{
  (
    ( < THEREEXISTATMOST_CONSTANT > | < THEREEXISTATMOST_GUID_CONSTANT > ) { val.add(getCycAccess().thereExistAtMostConst); }
    var = variable(false) { val.add(var); }
    sent = sentence(false) { val.add(sent); }
  )
  eof(requireEOF)
  { return val; }
}

CycList existLBoundForm(boolean requireEOF) throws java.io.IOException, UnsupportedVocabularyException :
{
  CycVariable var = null;
  CycObject sent = null;
  CycList val = new CycList();
}
{
  (
    ( < THEREEXISTATLEAST_CONSTANT > | < THEREEXISTATLEAST_GUID_CONSTANT > ) { val.add(getCycAccess().thereExistAtLeastConst); }
    var = variable(false) { val.add(var); }
    sent = sentence(false) { val.add(sent); }
  )
  eof(requireEOF)
  { return val; }
}

CycList genericSentence(boolean requireEOF) throws java.io.IOException, UnsupportedVocabularyException :
{
  CycObject pred = null;
  CycList args = null;
}
{
  (
    pred = predicate(false)
    args = argumentList(false) { args.add(0, pred); }
  )
  eof(requireEOF)
  { return args; }
}

CycList sentenceList(boolean requireEOF) throws java.io.IOException, UnsupportedVocabularyException :
{
  CycObject sent = null;
  CycVariable var = null;
  CycList result = new CycList();
}
{
  (
    ( sent = sentence(false) { result.add(sent); } )*
    ( "." var = variable(false) )?
  )
  eof(requireEOF)
  { 
    if (var != null) { result.setDottedElement(var); }
    if (result.size() == 0) { result = null; }
    return result; 
  }
}

CycList argumentList(boolean requireEOF) throws java.io.IOException, UnsupportedVocabularyException :
{
  Object curTerm = null;
  CycVariable var = null;
  CycList result = new CycList();
}
{
  (
    ( curTerm = term(false) { result.add(curTerm); } )*
    ( "." var = variable(false) )?
  )
  eof(requireEOF)
  { 
    if (var != null) { result.setDottedElement(var); }
    return result; 
  }
}

CycObject predicate(boolean requireEOF) throws java.io.IOException, UnsupportedVocabularyException :
{
  CycObject t = null;
}
{
  ( t = representedTerm(false) )
  eof(requireEOF)
  { return t; }
}

CycObject sentenceDenotingRepresentedTerm(boolean requireEOF) 
throws java.io.IOException, UnsupportedVocabularyException :
{
  CycObject val = null;
}
{
  ( val = atomicSentenceDenotingRepresentedTerm(false) /*| 
    val = nonAtomicSentenceDenotingDenotationalTerm(false)*/ ) //FIX ME!!!!!
  eof(requireEOF)
  { return val; }
}

CycList nonAtomicSentenceDenotingDenotationalTerm(boolean requireEOF) 
throws java.io.IOException, UnsupportedVocabularyException :
{
  CycList val;
}
{
  ( val = nonAtomicDenotationalTerm(false) )
  eof(requireEOF)
  { return val; }
}

CycObject representedTerm(boolean requireEOF) 
throws java.io.IOException, UnsupportedVocabularyException :
{
  CycObject val = null;
}
{
  ( val = atomicRepresentedTerm(false) | val = nonAtomicDenotationalTerm(false) )
  eof(requireEOF)
  { return val; }
}

CycList nonAtomicDenotationalTerm(boolean requireEOF) 
throws java.io.IOException, UnsupportedVocabularyException :
{
  CycObject func;
  CycList args;
}
{
  ( 
    < OPEN_PAREN > 
    func = function(false) 
    args = argumentList(false) 
    < CLOSE_PAREN >
  )
  eof(requireEOF)
  { args.add(0, func);
    return args; }
}

CycObject function(boolean requireEOF) throws java.io.IOException, UnsupportedVocabularyException :
{
  CycObject val = null;
}
{
  ( val = representedTerm(false) ) 
  eof(requireEOF)
  { return val; }
}

Object denotationalTerm(boolean requireEOF) throws java.io.IOException, UnsupportedVocabularyException :
{
  Object val = null;
}
{
  ( val  = atomicDenotationalTerm(false) | val = nonAtomicDenotationalTerm(false) )
  eof(requireEOF)
  { return val; }
}

///// Deal with atoms

Object atomicDenotationalTerm(boolean requireEOF) 
throws java.io.IOException, UnsupportedVocabularyException :
{
  Object result = null;
}
{
  ( result = atomicRepresentedTerm(false) | result = literal(false) )
  eof(requireEOF)
  { return result; }
}

CycObject atomicSentenceDenotingRepresentedTerm(boolean requireEOF) 
throws java.io.IOException, UnsupportedVocabularyException :
{
  CycObject val = null;
}
{
  ( val = sentenceDenotingConstant(false) | val = sentenceDenotingVariable(false) )
  eof(requireEOF)
  { return val; }
}

CycObject atomicRepresentedTerm(boolean requireEOF) 
throws java.io.IOException, UnsupportedVocabularyException :
{
  CycObject val = null;
}
{
  ( val = constant(false) | val = variable(false) )
  eof(requireEOF)
  { return val; }
}

Object literal(boolean requireEOF) throws java.io.IOException :
{
  Object val = null;
}
{
  ( val = string(false) | val = number(false) )
  eof(requireEOF)
  { return val; }
}

CycConstant sentenceDenotingConstant(boolean requireEOF) 
throws java.io.IOException, UnsupportedVocabularyException :
{
  CycConstant val = null;
}
{
  ( val = constant(false) )
  eof(requireEOF)
  { return val; }
}

CycConstant constant(boolean requireEOF) throws java.io.IOException, UnsupportedVocabularyException :
{
  CycConstant val = null;
  Token t = null;
}
{
  ( 
    val = coreConstant(false)
    | t = < CONSTANT_NAME1 > { val = makeConstantFromName(t.image); }
    | t = < CONSTANT_NAME2 > { val = makeConstantFromName(t.image); }
    | t = < CONSTANT_GUID > { val = makeConstantFromGUID(t.image.substring(2)); } //get rid of $G
    | t = < CONSTANT_GUID2 > { val = makeConstantFromGUID(t.image.substring(3, t.image.length() - 1)); } //get rid of #G and double quotes
  )
  eof(requireEOF)
  { return val; }
}

CycConstant makeConstantFromName(String name) :
{
  CycConstant val = null;
}
{
  {
    if (name.startsWith("#$")) {
      name = name.substring(2);
    }
    val = CycObjectFactory.getCycConstantCacheByName(name);
    if (val == null) {
      try {
        val = new CycConstant(name, null);
      } catch (Exception e) {
        throw new ParseException(e.getMessage());
      }
    }
    return val;
  }
}

CycConstant makeConstantFromGUID(String guidStr) :
{
  CycConstant val = null;
  Guid guid = null;
}
{
  {
    guid = CycObjectFactory.makeGuid(guidStr);
    val = CycObjectFactory.getCycConstantCacheByGuid(guid);
    if (val == null) {
      try {
        val = new CycConstant(null, guid);
      } catch (Exception e) {
        throw new ParseException(e.getMessage());
      }
    }
    return val;
  }
}

CycConstant coreConstant(boolean requireEOF) throws java.io.IOException, UnsupportedVocabularyException :
{
  CycConstant val = null;
}
{
  ( val = coreGUIDConstant(false) | val = coreNameConstant(false) )
  eof(requireEOF)
  { return val; }
}

CycConstant coreNameConstant(boolean requireEOF) throws java.io.IOException, UnsupportedVocabularyException :
{
  CycConstant val = null;
}
{
  ( 
    < TRUE_CONSTANT > { val = CycAccess.trueConst; }
    | < FALSE_CONSTANT > { val = CycAccess.falseConst; }
    | < AND_CONSTANT > { val = CycAccess.and; }
    | < OR_CONSTANT > { val = CycAccess.or; }
    | < XOR_CONSTANT > { val = CycAccess.xorConst; }
    | < NOT_CONSTANT > { val = CycAccess.not; }
    | < EQUIV_CONSTANT > { val = CycAccess.equivConst; }
    | < IMPLIES_CONSTANT > { val = CycAccess.impliesConst; }
    | < FORALL_CONSTANT > { val = CycAccess.forAllConst; }
    | < THEREEXISTS_CONSTANT > { val = CycAccess.thereExistsConst; }
    | < THEREEXISTEXACTLY_CONSTANT > { val = CycAccess.thereExistExactlyConst; }
    | < THEREEXISTATMOST_CONSTANT > { val = CycAccess.thereExistAtMostConst; }
    | < THEREEXISTATLEAST_CONSTANT > { val = CycAccess.thereExistAtLeastConst; }
    | < EXPANDSUBLFN_CONSTANT > { throw new UnsupportedVocabularyException(CycAccess.expandSubLFnConst); }
    | < SUBLQUOTEFN_CONSTANT > { throw new UnsupportedVocabularyException(CycAccess.sublQuoteFnConst); }
  )
  eof(requireEOF)
  { return val; }
}

CycConstant coreGUIDConstant(boolean requireEOF) throws java.io.IOException, UnsupportedVocabularyException :
{
  CycConstant val = null;
}
{
  (
    < TRUE_GUID_CONSTANT > { val = CycAccess.trueConst; }
    | < FALSE_GUID_CONSTANT > { val = CycAccess.falseConst; }
    | < AND_GUID_CONSTANT > { val = CycAccess.and; }
    | < OR_GUID_CONSTANT > { val = CycAccess.or; }
    | < XOR_GUID_CONSTANT > { val = CycAccess.xorConst; }
    | < NOT_GUID_CONSTANT > { val = CycAccess.not; }
    | < EQUIV_GUID_CONSTANT > { val = CycAccess.equivConst; }
    | < IMPLIES_GUID_CONSTANT > { val = CycAccess.impliesConst; }
    | < FORALL_GUID_CONSTANT > { val = CycAccess.forAllConst; }
    | < THEREEXISTS_GUID_CONSTANT > { val = CycAccess.thereExistsConst; }
    | < THEREEXISTEXACTLY_GUID_CONSTANT > { val = CycAccess.thereExistExactlyConst; }
    | < THEREEXISTATMOST_GUID_CONSTANT > { val = CycAccess.thereExistAtMostConst; }
    | < THEREEXISTATLEAST_GUID_CONSTANT > { val = CycAccess.thereExistAtLeastConst; }
    | < EXPANDSUBLFN_GUID_CONSTANT > { throw new UnsupportedVocabularyException(CycAccess.expandSubLFnConst); }
    | < SUBLQUOTEFN_GUID_CONSTANT > { throw new UnsupportedVocabularyException(CycAccess.expandSubLFnConst); }
  )
  eof(requireEOF)
  { return val; }
}


CycVariable sentenceDenotingVariable(boolean requireEOF) :
{ 
  CycVariable val = null;
}
{
  ( val = sentenceDenotingSimpleVariable(false) | val = sentenceDenotingMetaVariable(false) )
  eof(requireEOF)
  { return val; }
}

CycVariable variable(boolean requireEOF) :
{ 
  CycVariable val = null;
}
{
  ( val = simpleVariable(false) | val = metaVariable(false) )
  eof(requireEOF)
  { return val; }
}


CycVariable sentenceDenotingMetaVariable(boolean requireEOF) :
{
  CycVariable val = null;
}
{
  val = metaVariable(false) 
  eof(requireEOF)
  { return val; }
}

CycVariable sentenceDenotingSimpleVariable(boolean requireEOF) :
{
  CycVariable val = null;
}
{
  val = simpleVariable(false) 
  eof(requireEOF)
  { return val; }
}

CycVariable metaVariable(boolean requireEOF) :
{
  CycVariable val = null;
  Token t = null;
}
{
  ( t = < META_VARIABLE > { val = new CycVariable(t.image); } )
  eof(requireEOF)
  { return val; }
}

CycVariable simpleVariable(boolean requireEOF) :
{
  CycVariable val = null;
  Token t = null;
}
{
  ( t = < SIMPLE_VARIABLE > { val = new CycVariable(t.image); } )
  eof(requireEOF)
  { return val; }
}

String string(boolean requireEOF) :
{
  Token t = null;
}
{
  ( t = < STRING > )
  eof(requireEOF)
  { return t.image.substring(1, t.image.length()-1); }
}

Number number(boolean requireEOF) :
{
  Number val = null;
  Token t = null;
}
{
  (
    ( t = < INTEGER > ) { val = new Long((t.image.startsWith("+")) ? t.image.substring(1) : t.image); }
    | ( t = < FLOAT > ) { val = new Double(t.image.toLowerCase().replaceAll("d", "e")); }
  )
  eof(requireEOF)
  { return val; }
}
